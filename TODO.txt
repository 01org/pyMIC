TODOs (in a rough order of priority):
========================================

- optimize data transfers for offload:
  offload_transfer: buffer_release, copyin, copyout

- implement the following additional generators:
  - zeros
  - empty
  - random
  - zeros_like
  - empty_like
  - ones
  - ones_like
  - bcast
  - bcast_like
    
- implement interface is_allocated() to test if an array or buffer has
  been allocated already 

- support intents for kernel parameters, e.g.
  invoke_kernel("foo", in(a), in(b), out(c), d)
    -> transfer a and b to the device
    -> retrieve c from the device
    -> copyin and copyout d
  
- find a better way to load the .so files.  Right now, we need to 
  copy the files to the card or have them on NFS.  We also need to 
  set a proper LD_LIBRARY_PATH on the host to make the MIC find
  the libraries.  We need an interface that can be used to add
  a Python search path to load the libraries and their dependencies.

- allow for kernel invocation on both host and target

- add a lot more safety checks (both Python and C)
  + can we issue an error when the number of arguments expected by the kernel
    the number of arguments given during offloading does not match?

- support async offloads, use new class as the handle, e.g.
    class handle:
        def wait:
            pass
            
    h = dev.invoke_kernel_async(...)
    h.wait()
  
- check if global interpreter lock needs to be taken (if Python is multi-threaded)

- add all the missing Python documentation

- make the data management interface more generic
  + allow for multiple arrays in one invocation (can be handled in Python)

- package for use with the Python distutils.
  + config.py
  + setup.py
  + use cmake for the C++ part

- support Python and MPSS on Windows
